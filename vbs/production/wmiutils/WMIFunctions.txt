Function GetWMIData(strComputer, WMIClass, WMIProperty)
On Error Resume Next
	'
	' This function replaces more or less any WMI Call 
	' that returns a single value. You could potentially
	' tweak it to handle more complicated returns like
	' IPAddress.
	'
	' The function is passed three arguments:
	'     strComputer = Computer to run WMI call against
	'     WMIClass = The WMI Class that we're querying
	'     WMIProperty = The WMI property that we're looking for
	'
	Dim objWMIService
	Dim colItems
	Dim objItem
	Dim strReturnVal
	Dim strPingStatus
	
	strPingStatus = PingStatus(strComputer)
	
	If strPingStatus = "Success" Then
		Set objWMIService = GetObject("winmgmts:\\" & strComputer & "\root\CIMV2") 
			If Err <> 0 Then 
				If objWMIService Is Nothing Then
					Call LogData(1, "Unable to bind to WMI on " & strComputer & vbCrLf & "Error Num: " & Err.Number & vbCrLf & "Description: " & Err.Description & vbCrLf & "Source: " & Err.Source)
				End If
			End If
		Set colItems = objWMIService.ExecQuery("SELECT " & WMIProperty & " FROM " & WMIClass,,48) 
			If colItems Is Nothing Then 
				Call LogData(1, "SELECT " & WMIProperty & " FROM " & WMIClass & vbCrLf & "Returned Nothing for " & strComputer)
			End If
		
		For Each objItem In colItems
			Select Case lcase(WMIProperty)
				Case "caption"
					strReturnVal = objItem.Caption
				Case "csdversion"
					strReturnVal = objItem.CSDVersion
					If isNull(strReturnVal) Then strReturnVal = ""
				Case "serialnumber"
					strReturnVal = objItem.SerialNumber
				Case "dnshostname"
					strReturnVal = objItem.DNSHostName
				Case "csname"
					strReturnVal = objItem.CSName
				Case "uuid"
					strReturnVal = objItem.UUID
				Case "identifyingnumber"
					strReturnVal = objItem.IdentifyingNumber
				Case "name"
					strReturnVal = objItem.Name
				Case "vendor"
					strReturnVal = objItem.Vendor
				Case "systemdrive"
					strReturnVal = objItem.SystemDrive
				Case "totalvisiblememorysize"
					strReturnVal = objItem.TotalVisibleMemorySize
				Case "numberofcores"
					strReturnVal = objItem.NumberOfCores
				Case "lastbootuptime"
					strReturnVal = objItem.LastBootUpTime
				Case "currentclockspeed"
					strReturnVal = objItem.CurrentClockSpeed
				Case "username"
					strReturnVal = objItem.UserName
				Case "smbiosbiosversion"
					strReturnVal = objItem.SMBIOSBIOSVersion
				Case Else
					Call LogData(1, "Unable to find " & WMIProperty & " in " & WMIClass & vbCrLf & "Please submit a ticket at http://code.patton-tech.com/winmon/newticket")
			End Select
		Next
		GetWMIData = strReturnVal
	Else
		Call LogData(1, "Pinging " & strComputer & " failed with " & vbCrLf & strPingStatus)
		GetWMIData = strPingStatus
	End If
End Function

Function GetMac(strComputer, strSubNet)
	'
	' Get MAC Address of the computer
	'
	Dim strMacAddress
	Dim objWMIService
	Dim colItems
	Dim objItem
	Dim strIPAddress

	Set objWMIService = GetObject("winmgmts:\\" & strComputer & "\root\CIMV2") 
	Set colItems = objWMIService.ExecQuery("SELECT * FROM Win32_NetworkAdapterConfiguration Where IPEnabled = True",,48) 

		For Each objItem in colItems
			strIPAddress = Join(objItem.IPAddress, ",")
			If InStr(strIPAddress, strSubNet) Then
				strMacAddress = objItem.MACAddress
				Exit For
			End If
		Next

	GetMac = strMacAddress
End Function

Function PingStatus(strComputer)
'
' Source
' http://technet.microsoft.com/en-us/library/ee692852.aspx
'
On Error Resume Next

Set objWMIService = GetObject("winmgmts:{impersonationLevel=impersonate}!\\.\root\cimv2")
Set colPings = objWMIService.ExecQuery("SELECT * FROM Win32_PingStatus WHERE Address = '" & strComputer & "'")

For Each objPing in colPings
	Select Case objPing.StatusCode
		Case 0 PingStatus = "Success"
		Case 11001 PingStatus = "Status code 11001 - Buffer Too Small"
		Case 11002 PingStatus = "Status code 11002 - Destination Net Unreachable"
		Case 11003 PingStatus = "Status code 11003 - Destination Host Unreachable"
		Case 11004 PingStatus = "Status code 11004 - Destination Protocol Unreachable"
		Case 11005 PingStatus = "Status code 11005 - Destination Port Unreachable"
		Case 11006 PingStatus = "Status code 11006 - No Resources"
		Case 11007 PingStatus = "Status code 11007 - Bad Option"
		Case 11008 PingStatus = "Status code 11008 - Hardware Error"
		Case 11009 PingStatus = "Status code 11009 - Packet Too Big"
		Case 11010 PingStatus = "Status code 11010 - Request Timed Out"
		Case 11011 PingStatus = "Status code 11011 - Bad Request"
		Case 11012 PingStatus = "Status code 11012 - Bad Route"
		Case 11013 PingStatus = "Status code 11013 - TimeToLive Expired Transit"
		Case 11014 PingStatus = "Status code 11014 - TimeToLive Expired Reassembly"
		Case 11015 PingStatus = "Status code 11015 - Parameter Problem"
		Case 11016 PingStatus = "Status code 11016 - Source Quench"
		Case 11017 PingStatus = "Status code 11017 - Option Too Big"
		Case 11018 PingStatus = "Status code 11018 - Bad Destination"
		Case 11032 PingStatus = "Status code 11032 - Negotiating IPSEC"
		Case 11050 PingStatus = "Status code 11050 - General Failure"
		Case Else PingStatus = "Status code " & objPing.StatusCode & " - Unable to determine cause of failure."
	End Select
Next

End Function